// This syntax is called object literal notation.
var person = {
  // Note that there are no quotes around 'name'. This
  // is because words to the left of the colon are
  // treated as string literals since object keys must
  // be a string. You could add quotes if you want,
  // but they are normally omitted.
  name: 'Ryan', // note the comma
  weight: 150 // no comma after the last key-value pair
}; // Don't forget the semicolon.

// Make a variable called otherPerson with the name
// 'Zach' and a weight of 800.

var otherPerson = {
    name: 'Zach',
    weight: 800
};

// This uses the object literal syntax we learned before
// to create an empty object.
var literal = {};

var constructed = new Object();

// Make a new object called otherConstructed using the
// 'new' keyword.
var otherConstructed = new Object();

// Initialize an empty object as before.
var person = {};

// Option one: dot notation. 'name' is treated as
// a string literal.
person.name = 'Ryan';

// Option two: bracket notation. Whatever is in brackets 
// is treated as a variable and is coerced into string.
// So, weight must be in quotes.
person['weight'] = 350;

// Add an 'age' property with the value 30 to the person
// using dot notation.
person.age = 30;

// Add an 'height' property with the value 70 to the person
// using bracket notation.
person['height'] = 70;

// Create person with the object literal
// syntax this time.
var person = {
  name: 'Ryan',
  weight: 350,
  age: 30,
  height: 70
};

// The syntax for accessing properties is the same as
// the syntax for setting them.
var retrievedName = person.name;
var retrievedWeight = person['weight'];

var retrievedAge;
var retrievedHeight;

// Set retrievedAge using dot notation.
retrievedAge = person.name;
// Set retrievedHeight using bracket notation.
retrievedHeight = person['height'];

var obj = {};
var otherObj = {};

var map = {};
map[obj] = 'first';
map[otherObj] = 'second';

map[obj]; // This is 'second'.

// Recall that object keys are strings. The string
// generated by an object is '[object Object]' by default.
// So, obj and otherObj have the same key; 
// map[obj] and map[otherObj] are therefore equivalent.
